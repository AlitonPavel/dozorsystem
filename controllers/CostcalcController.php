<?php

namespace app\controllers;

use app\components\BaseController;
use app\models\CostCalc;
use app\models\Demand;
use yii\filters\AccessControl;
use Yii;
use yii\filters\VerbFilter;

class CostcalcController extends BaseController
{
    const PAGE_TITLE_INDEX          = 'Реестр КП и смет';
    const PAGE_TITLE_CREATE         = 'Создание КП';
    const PAGE_TITLE_UPDATE         = 'Редактирование';
    const PAGE_TITLE_UPDATE_DETAILS = 'Редактирование Доп. информации';

    const reqType       = 'type';
    const reqObject     = 'object_id';
    const reqUser     = 'user';

    protected $type;
    protected $object;
    protected $user;

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['index', 'update', 'ready', 'details', 'create', 'delete'],
                'rules' => [
                    [
                        'actions' => ['index'],
                        'allow' => true,
                        'roles' => ['CostCalcView'],
                    ],
                    [
                        'actions' => ['update'],
                        'allow' => true,
                        'roles' => ['CostCalcUpdate'],
                    ],
                    [
                        'actions' => ['ready'],
                        'allow' => true,
                        'roles' => ['CostCalcUpdate'],
                    ],
                    [
                        'actions' => ['unready'],
                        'allow' => true,
                        'roles' => ['CostCalcUpdate'],
                    ],
                    [
                        'actions' => ['details'],
                        'allow' => true,
                        'roles' => ['CostCalcUpdate'],
                    ],
                    [
                        'actions' => ['create'],
                        'allow' => true,
                        'roles' => ['CostCalcCreate'],
                    ],
                    [
                        'actions' => ['delete'],
                        'allow' => true,
                        'roles' => ['CostCalcDelete'],
                    ],
                    [
                        'actions' => ['print'],
                        'allow' => true,
                        'roles' => ['CostCalcView'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function selectData()
    {
        parent::selectData(); // TODO: Change the autogenerated stub

        $this->source = CostCalc::find()
            ->andWhere('costcalcs.deldate is null')
            ->joinWith('object')
            ->joinWith('client')
            ->joinWith('company as comp')
            ->joinWith('prior')
            ->joinWith('user');

        if (!empty($this->type))
        {
            $this->type = $this->type - 1;

            $this->source->andWhere(['costcalcs.type_id' => $this->type]);
        }

        if (!empty($this->object))
        {
            $this->source->andWhere(['costcalcs.object_id' => $this->object]);
        }

        if (!empty($this->user))
        {
            $this->source->andWhere(['costcalcs.user_id' => $this->user]);
        }
    }

    public function readRequest()
    {
        parent::readRequest(); // TODO: Change the autogenerated stub

        $this->type         = $this->request->get(self::reqType);
        $this->object       = $this->request->get(self::reqObject);
        $this->user         = $this->request->get(self::reqUser);
    }

    /**
     * Renders the index view for the module
     * @return string
     */
    public function actionIndex($ajax = false, $object = null)
    {
        if (!empty($object))
        {
            $this->object = $object;
        }

        $this->selectData();

        if ($ajax) {
            return $this->renderPartial('index', [
                'source' => $this->source,
                'ajax' => true
            ]);
        }
        return $this->render('index', [
            'source' => $this->source,
            'ajax' => false
        ]);
    }

    public function actionCreate()
    {
        $model = new CostCalc();
        $model->setScenario(CostCalc::SCENARIO_CREATE);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['/costcalc/view', 'id' => $model->id]);
        }

        $model->date = Date('d.m.Y');
        $model->user_id = Yii::$app->user->getId();

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        $model->setScenario(CostCalc::SCENARIO_UPDATE);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            $model->recalc();
            return $this->redirect(['/costcalc/view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    public function actionDetails($id)
    {
        $model = $this->findModel($id);
        $model->setScenario(CostCalc::SCENARIO_UPDATE_DETAILS);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            $model->recalc();
            return $this->redirect(['/costcalc/view', 'id' => $model->id]);
        }

        return $this->render('details', [
            'model' => $model,
        ]);
    }

    public function actionReady($id)
    {
        $calc = $this->findModel($id);

        if ($calc->ready())
        {
            $this->redirect(['/costcalc/view', 'id' => $calc->id]);
        }
        else
        {
            $this->redirect(['/costcalc/view', 'id' => $calc->id, 'ready' => false]);
        }
    }

    public function actionUnready($id)
    {
        $calc = $this->findModel($id);

        if ($calc->unready())
        {
            $this->redirect(['/costcalc/view', 'id' => $calc->id]);
        }
        else
        {
            $this->redirect(['/costcalc/view', 'id' => $calc->id, 'unready' => false]);
        }
    }

    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    protected function findModel($id)
    {
        if (($model = CostCalc::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    public function actionPrint($id)
    {
        $model = $this->findModel($id);

        return $this->render('print', [
            'model' => $model
        ]);
    }

    public function checkReady(CostCalc $model)
    {
        if (!empty($this->dateready))
        {
            $this->addGeneralError($model->getTypeName() . ' запрещено редактировать, требуется снять готовность.');
        }
    }
}
