<?php

namespace app\models;

use app\components\BaseActiveRecord;

class CostCalcEquip extends BaseActiveRecord
{
    const SCENARIO_CREATE = 'insert';
    const SCENARIO_UPDATE = 'update';

    public static function tableName()
    {
        return '{{costcalcequips}}';
    }

    protected $fields = [
        'quant'         => BaseActiveRecord::TYPE_MONEY,
        'pricelow'      => BaseActiveRecord::TYPE_MONEY,
        'pricehigh'     => BaseActiveRecord::TYPE_MONEY,
        'pricelowsum'   => BaseActiveRecord::TYPE_MONEY,
        'pricehighsum'  => BaseActiveRecord::TYPE_MONEY,
    ];

    public function getEquip()
    {
        return $this->hasOne(Equip::className(), ['id' => 'equip_id']);
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();

        $columns = [
            'id',
            'calc_id',
            'equip_id',
            'quant',
            'pricelow',
            'pricehigh',
            'pricelowsum',
            'pricehighsum',
            'note',
            'sort',
        ];

        $scenarios[self::SCENARIO_CREATE] = $columns;
        $scenarios[self::SCENARIO_UPDATE] = $columns;
        return $scenarios;
    }

    public function rules()
    {
        return [
            [['calc_id', 'equip_id', 'quant', 'pricelow', 'pricehigh', 'pricelowsum', 'pricehighsum'], 'required'],
            ['quant', 'double', 'min' => 0.1],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ИД',
            'calc_id' => 'Смета',
            'equip_id' => 'Оборудование',
            'quant' => 'Кол-во',
            'pricelow' => 'Себестоимость за 1ед.',
            'pricehigh' => 'Цена для клиента за 1ед.',
            'pricelowsum' => 'Себест. итого',
            'pricehighsum' => 'Цена итого',
            'note' => 'Примечание',
            'sort' => 'Сортировка',
        ];
    }

    public function load($data, $formName = null)
    {
        $result = parent::load($data, $formName);

        $this->pricelowsum = $this->pricelow * $this->quant;
        $this->pricehighsum = $this->pricehigh * $this->quant;

        return $result;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $calc = CostCalc::findOne($this->calc_id);
        $calc->recalc();
    }

    public function validate($attributeNames = null, $clearErrors = true)
    {
        $hasError = false;

        $calc = CostCalc::findOne($this->calc_id);

        if (!empty($calc->dateready))
        {
            $this->addGeneralError($calc->getTypeName() . ' запрещено редактировать, требуется снять готовность.');
            $hasError = true;
        }

        $v = parent::validate($attributeNames, $clearErrors);

        return !$hasError && $v;
    }
}

