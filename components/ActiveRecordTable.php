<?php

namespace app\components;

use yii\db\ActiveQuery;
use Yii;

class ActiveRecordTable extends Table
{
    const TYPE_TEXT         = 'text';
    const TYPE_DATE         = 'date';
    const TYPE_DATETIME     = 'datetime';
    const TYPE_MONEY        = 'money';

    const TYPE_CALC         = 'calc';
    const TYPE_ACTION       = 'action';

    /** @var Pagination $paginator */
    public $paginator;
    /** @var ActiveQuery $query */
    public $query;

    public $pageSize = 20;

    public $htmlGlobalAggregates = '';
    public $htmlCustomHeader = '';

    public $enableFilters = false;
    public $showAggregates = false;
    public $showGlobalAggregates = false;
    public $showCustomHeader = false;

    public $filters = [];

    protected $prepareData = [];
    protected $prepareColumns = [];
    protected $aggregates = [];
    protected $countColumns = 0;

    public function initColumns()
    {
        foreach ($this->columns as $column)
        {
            if (!(isset($column['hidden']) && $column['hidden'])) {
                $this->countColumns++;
            }
            if (isset($column['fieldname'])) {
                $this->prepareColumns[$column['fieldname']] = $column;
            }
        }
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->initColumns();
        $this->selectData();
    }

    public function getFilters()
    {
        return Filter::buildFilters($this->filters, Yii::$app->request);
    }

    public function applyFilters() {
        Filter::applyFiltersToQuery($this->query, $this->getFilters());
    }

    public function selectData()
    {
        if ($this->enableFilters) {
            $this->applyFilters();
        }
        if ($this->query) {
            $this->paginator = new Pagination(['totalCount' => $this->query->count(), 'pageSize' => $this->pageSize]);
            $this->data = $this->query->offset($this->paginator->offset)
                ->limit($this->paginator->limit)
                ->all();
        }
    }

    public function prepareDataForRender()
    {
        /** @var BaseActiveRecord $preRow */
        $preRow = null;

        foreach ($this->data as $row)
        {

            $tmpRow = [];

            /** @var \yii\db\BaseActiveRecord $row */
            foreach ($this->columns as $column)
            {
                if (isset($column['hidden']) && $column['hidden'] == false)
                {
                    continue;
                }

                switch ($column['type'] ?? '') {
                    case self::TYPE_TEXT:
                        $tmpRow[$column['fieldname']] = $row->{$column['fieldname']};
                        break;
                    case self::TYPE_DATE:
                        $tmpRow[$column['fieldname']] = Utils::dateFormat($row->{$column['fieldname']}, Utils::DEFAUL_DATESHORT_FORMAT);
                        break;
                    case self::TYPE_DATETIME:
                        $tmpRow[$column['fieldname']] = Utils::dateFormat($row->{$column['fieldname']}, Utils::DEFAULT_DATE_FORMAT);
                        break;
                    case self::TYPE_MONEY:
                        $tmpRow[$column['fieldname']] = Utils::formatBaseToFormatMoney($row->{$column['fieldname']}, Utils::DEFAULT_DATE_FORMAT);
                        break;
                    case self::TYPE_CALC:
                        $tmpRow[$column['fieldname']] = $column['calc']($row, $preRow);
                        break;
                    case self::TYPE_ACTION:
                        $tmpRow[$column['fieldname'] ?? ''] = $this->renderActions($row, $column['buttons']);
                        break;
                    default:
                        $tmpRow[$column['fieldname']] = $row->{$column['fieldname']};
                        break;
                }

                if ($this->showAggregates && isset($column['aggregates']))
                {
                    $aggregates = $column['aggregates'];

                    foreach ($aggregates as $key => $aggregate)
                    {
                        if (isset($this->aggregates[$column['fieldname']]))
                        {
                            if (isset($this->aggregates[$column['fieldname']][$key]))
                            {
                                $this->aggregates[$column['fieldname']][$key] = $aggregate['calc']($this->aggregates[$column['fieldname']][$key], $tmpRow[$column['fieldname']]);
                            }
                            else
                            {
                                $this->aggregates[$column['fieldname']] = array_merge($this->aggregates[$column['fieldname']], [$key => $aggregate['calc'](null, $tmpRow[$column['fieldname']])]);
                            }
                        }
                        else
                        {
                            $this->aggregates[$column['fieldname']] = [$key => $aggregate['calc'](null, $tmpRow[$column['fieldname']])];
                        }
                    }
                }

                if (isset($this->rowAddClass)) {
                    $func = $this->rowAddClass;
                    $tmpRow['rowClass'] = $func($row);
                }
            }

            $this->prepareData[] = $tmpRow;

            $preRow = $row;
        }
    }

    public function renderActions(BaseActiveRecord $row, array $buttons)
    {
        $html = '';

        foreach ($buttons as $key => $button)
        {
            switch ($key) {
                case Table::BTN_INSERT:
                    $url = $button($row);
                    $html .= <<< HTML
                    <a data-pjax="0" href="$url" class="table_action">
                        <span>
                            <img src="/web/images/dot.gif" title="Вставить"
                                 class="table_icon table_icon_ins">
                        </span>
                    </a>
HTML;
                    break;
                case Table::BTN_EDIT:
                    $url = $button($row);
                    $html .= <<< HTML
                    <a data-pjax="0" href="$url" class="table_action">
                        <span>
                            <img src="/web/images/dot.gif" title="Изменить"
                                 class="table_icon table_icon_edit">
                        </span>
                    </a>
HTML;
                    break;
                case Table::BTN_DELETE:
                    $url = $button($row);
                    $html .= <<< HTML
                    <a data-pjax="0" href="$url" data-method="post">
                        <span>
                            <img src="/web/images/dot.gif" title="Удалить"
                                 class="table_icon table_icon_del">
                        </span>
                    </a>
HTML;
                    break;
            }
        }

        return $html;
    }

    public function renderFilterColumn($column, $filters)
    {
        ?>
        <td class="table_filters_filter">
            <?php if (isset($filters[$column['fieldname']])) { ?>
                <input autocomplete="off" type="text" name="<?= $filters[$column['fieldname']]['reqName'] ?>"
                       value="<?= Filter::getFilterValue($filters[$column['fieldname']]['reqName'], Yii::$app->request) ?>">
            <?php } ?>
        </td>
        <?php
    }

    public function renderFilterColumns()
    {
        if (!$this->enableFilters) return;

        ?>
        <tr>
            <?php
            foreach ($this->columns as $column)
            {
                if (!(isset($column['hidden']) && $column['hidden'])) {
                    $this->renderFilterColumn($column, $this->filters);
                }
            }
            ?>
        <tr>
        <?php
    }

    public function renderHeadColumn($column)
    {
        ?>
            <td><?= isset($column['name']) ? $column['name'] : '#' ?></td>
        <?
    }

    public function renderHeadColumns()
    {
        ?>
        <tr>
        <?php
        foreach ($this->columns as $column)
        {
            if (!(isset($column['hidden']) && $column['hidden'])) {
                $this->renderHeadColumn($column);
            }
        }
        ?>
        </tr>
        <?php
    }

    public function getWidthColumnByFieldName(string $fieldName)
    {
        return isset($this->prepareColumns[$fieldName]['width']) ? 'width: ' . $this->prepareColumns[$fieldName]['width'] : '';
    }

    public function renderData()
    {
        if (count($this->prepareData) == 0)
        {
            ?>
            <tr>
                <td colspan="<?= $this->countColumns; ?>" style="text-align: center; height: 50px">Данных нет</td>
            </tr>
            <?php
        }

        foreach ($this->prepareData as $data) {
            ?>
            <tr class="<?= isset($data['rowClass']) ? $data['rowClass'] : '' ?>">
                <?php
                foreach ($data as $columnName => $columnValue) {
                    if (!in_array($columnName, ['rowClass', 'width', 'height'])) {
                        ?>
                        <td style="<?= $this->getWidthColumnByFieldName($columnName); ?>"><?= $columnValue ?></td>
                    <?php
                    }
                }
                ?>
            </tr>
            <?php
        }
    }

    public function renderAggregates()
    {
        if (!$this->showAggregates) return;
        ?>
        <tr class="aggregates">
        <?php
        foreach ($this->prepareColumns as $fieldName => $column)
        {
            if (isset($this->aggregates[$fieldName]))
            {
                ?>
                <td>
                    <?php
                foreach ($this->aggregates[$fieldName] as $key => $aggregate) {
                    switch ($column['type']) {
                        case self::TYPE_MONEY:
                            echo '<div><b>' . $column['aggregates'][$key]['caption'] . Utils::toFormatMoney($aggregate) . '</b></div>';
                            break;
                        case self::TYPE_TEXT:
                            echo '<div><b>' . $column['aggregates'][$key]['caption'] . $aggregate . '</b></div>';
                            break;
                        case self::TYPE_DATE:
                            echo '<div><b>' . $column['aggregates'][$key]['caption'] . Utils::dateFormat($aggregate, Utils::DEFAUL_DATESHORT_FORMAT) . '</b></div>';
                            break;
                        case self::TYPE_DATETIME:
                            echo '<div><b>' . $column['aggregates'][$key]['caption'] . Utils::dateFormat($aggregate, Utils::DEFAULT_DATE_FORMAT) . '</b></div>';
                            break;
                        default:
                            echo '<div><b>' . $column['aggregates'][$key]['caption'] . $aggregate . '</b></div>';
                            break;
                    }
                }
                ?>
                </td>
                <?php
            }
            else
            {
                ?>
                <td></td>
                <?php
            }
        }
        ?>
        </tr>
        <?php
    }

    public function renderGlobalAggregates()
    {
        if (!$this->showGlobalAggregates) return;

        echo $this->htmlGlobalAggregates;
    }

    public function renderCustomHeader()
    {
        if (!$this->showCustomHeader) return;

        echo $this->htmlCustomHeader;
    }

    public function run()
    {
        $this->prepareDataForRender();

        return $this->render('activerecordtable2', [
                'widget' => $this,
                'paginator' => $this->paginator,
                'prepareData' => $this->prepareData
            ]);
    }
}